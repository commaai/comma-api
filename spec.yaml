openapi: 3.0.3
info:
  title: comma API
  description: comma API
  version: 1.0.0
servers:
  - url: 'https://api.comma.ai'
    description: Production server
paths:
  /v1/me:
    get:
      operationId: getProfile
      summary: Returns information about the authenticated user
      responses:
        '200':
          description: JSON object containing the user's profile information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
  /v1/me/devices:
    get:
      operationId: getDevices
      summary: List devices owned or readable by authenticated user
      responses:
        '200':
          description: JSON array of device objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
  /v1/{dongleId}/devices:
    parameters:
      - $ref: '#/components/parameters/dongleId'
    get:
      operationId: getUserDevices
      summary: List devices owned or readable by specified user
      responses:
        '200':
          description: JSON array of device objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
  /v1.1/devices/{dongleId}:
    parameters:
      - $ref: '#/components/parameters/dongleId'
    get:
      operationId: getDevice
      summary: Returns information about a device
      responses:
        '200':
          description: JSON object containing the device's information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
  /v1/devices/{dongleId}:
    parameters:
      - $ref: '#/components/parameters/dongleId'
    patch:
      operationId: updateDevice
      summary: Update device alias
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                alias:
                  type: string
      responses:
        '200':
          description: JSON object containing the updated device's information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
  /v1/devices/{dongleId}/location:
    parameters:
      - $ref: '#/components/parameters/dongleId'
    get:
      operationId: getDeviceLocation
      summary: Device location
      responses:
        '200':
          description: JSON object containing device location, or an error message if the location is not known.
          content:
            application/json:
              schema:
                oneOf:
                  - allOf:
                      - $ref: '#/components/schemas/DeviceLocation'
                      - type: object
                        properties:
                          dongle_id:
                            $ref: '#/components/schemas/DongleID'
                  - type: object
                    properties:
                      error:
                        type: string
                        const: Location unavailable
  /v1/devices/{dongleId}/pair:
    parameters:
      - $ref: '#/components/parameters/dongleId'
    post:
      operationId: pairDeviceToUser
      summary: Pair device
      description: Pair a device to a user's account.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  $ref: '#/components/schemas/DongleID'
      responses:
        '200':
          $ref: '#/components/responses/SuccessInteger'
  /v1/devices/{dongleId}/unpair:
    parameters:
      - $ref: '#/components/parameters/dongleId'
    post:
      operationId: unpairDevice
      summary: Unpair device
      description: Unpair device from authenticated user's account. Any comma prime subscription linked to the device will be cancelled.
      responses:
        '200':
          $ref: '#/components/responses/SuccessInteger'
  /v1/devices/{dongleId}/owner:
    parameters:
      - $ref: '#/components/parameters/dongleId'
    get:
      operationId: getDeviceOwner
      summary: Device owner
      description: Returns the owner of a device.
      responses:
        '200':
          description: JSON object containing information about the device owner
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: string
                    description: OAuth2 user ID
                  points:
                    type: integer
                    description: comma points
                  username:
                    type: string
                    deprecated: true
                    nullable: true
                  email:
                    type: string
  /v1/devices/{dongleId}/users:
    parameters:
      - $ref: '#/components/parameters/dongleId'
    get:
      operationId: getDeviceUsers
      summary: Device users
      description: List users with access to a device
      responses:
        '200':
          description: JSON array of device user objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeviceUser'
  /v1/devices/{dongleId}/add_user:
    parameters:
      - $ref: '#/components/parameters/dongleId'
    post:
      operationId: addDeviceUser
      summary: Grant device read permissions to a user
      description: Grant read permissions to a user by email. Authed user must be device owner to perform. If multiple users are attached to an email address, device access is granted to all users.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: Email of user to add
                email_userid:
                  type: string
                  description: OAuth2 user ID of user to add
      responses:
        '200':
          $ref: '#/components/responses/SuccessInteger'
  /v1/devices/{dongleId}/del_user:
    parameters:
      - $ref: '#/components/parameters/dongleId'
    post:
      operationId: revokeDeviceUser
      summary: Revoke device read permissions from a user
      description: Revoke read permissions from a user by email. Authed user must be device owner to perform. If multiple users are attached to an email address, device access is removed from all users.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        '200':
          $ref: '#/components/responses/SuccessInteger'
  /v1.1/devices/{dongleId}/stats:
    parameters:
      - $ref: '#/components/parameters/dongleId'
    get:
      operationId: getDeviceStatistics
      summary: Device driving statistics
      description: Returns aggregate driving statistics for a device over the past 7 days and all time.
      responses:
        '200':
          description: JSON object containing driving statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  all:
                    $ref: '#/components/schemas/DrivingStatistics'
                  week:
                    $ref: '#/components/schemas/DrivingStatistics'
  /v1/devices/{dongleId}/bootlogs:
    parameters:
      - $ref: '#/components/parameters/dongleId'
    get:
      operationId: getDeviceBootLogs
      summary: Device boot logs
      description: Retrieve boot logs uploaded from a device.
      responses:
        '200':
          description: JSON array of URLs to boot log files. Files are available at each URL for one hour from the time of the request.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /v1/devices/{dongleId}/crashlogs:
    parameters:
      - $ref: '#/components/parameters/dongleId'
    get:
      operationId: getDeviceCrashLogs
      summary: Device crash logs
      description: Retrieve crash logs uploaded from a device.
      responses:
        '200':
          description: JSON array of URLs to crash log files. Files are available at each URL for one hour from the time of the request.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /v1/devices/{dongleId}/routes:
    parameters:
      - $ref: '#/components/parameters/dongleId'
    get:
      operationId: getDeviceRoutes
      summary: Device routes
      description: Returns a list of routes uploaded from a device.
      parameters:
        - name: limit
          in: query
          description: Maximum number of routes to return
          schema:
            type: integer
            default: 20
        - name: created_after
          in: query
          description: Return routes created after this timestamp
          schema:
            type: integer
      responses:
        '200':
          description: JSON array of route objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Route'
  /v1/devices/{dongleId}/routes/preserved:
    parameters:
      - $ref: '#/components/parameters/dongleId'
    get:
      operationId: getDevicePreservedRoutes
      summary: Device preserved routes
      description: Returns a list of preserved routes uploaded from a device.
      responses:
        '200':
          description: JSON array of route objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Route'
  /v1/devices/{dongleId}/routes_segments:
    parameters:
      - $ref: '#/components/parameters/dongleId'
    get:
      operationId: getDeviceRoutesSegments
      summary: Device routes segments
      description: Returns a list of route segments uploaded from a device between a start and end timestamp.
      parameters:
        - name: start
          in: query
          description: Start timestamp in milliseconds
          schema:
            type: integer
        - name: end
          in: query
          description: End timestamp in milliseconds
          schema:
            type: integer
      responses:
        '200':
          description: JSON array of route segment objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RouteSegment'
  /v1/devices/{dongleId}/segments:
    parameters:
      - $ref: '#/components/parameters/dongleId'
    get:
      operationId: getDeviceSegments
      summary: Segments
      description: Returns time-sorted list of segments, each of which includes basic metadata derived from openpilot logs.
      parameters:
        - name: from
          in: query
          required: true
          schema:
            type: number
        - name: to
          in: query
          required: true
          schema:
            type: number
      responses:
        '200':
          description: JSON array of segments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Segment'
  /v1/devices/{dongleId}/athena_offline_queue:
    parameters:
      - $ref: '#/components/parameters/dongleId'
    get:
      operationId: getDeviceAthenaOfflineQueue
      summary: Athena offline queue
      description: Return a list of queued payloads for delivery to device when it is online.
      responses:
        '200':
          description: JSON array of queued payloads
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    expiry:
                      type: integer
                  additionalProperties: true
  /v1.4/{dongleId}/upload_url:
    parameters:
      - $ref: '#/components/parameters/dongleId'
    get:
      operationId: getUploadUrl
      summary: Get log file upload URL
      description: Request a URL to which an openpilot file an be uploaded via HTTP PUT. This endpoint only accepts tokens signed with a device private key.
      parameters:
        - name: path
          in: query
          description: File to upload from openpilot data directory.
          required: true
          schema:
            type: string
            example: "2019-06-06--11-30-31--9/fcamera.hevc"
        - name: expiry_days
          in: query
          description: Number of days the url should be valid.
          schema:
            type: integer
            minimum: 1
            maximum: 30
            default: 1
            example: 1
      responses:
        '200':
          description: JSON object containing upload URL
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    description: URL to which a PUT request can be sent with file contents
                example:
                    url: "https://commaincoming.blob.core.windows.net/commaincoming/239e82a1d3c855f2/2019-06-06--11-30-31/9/fcamera.hevc?sr=b&sp=c&sig=cMCrZt5fje7SDXlKcOIjHgA0wEVAol71FL6ac08Q2Iw%3D&sv=2018-03-28&se=2019-06-13T18%3A43%3A01Z"
  /v1/{dongleId}/upload_urls:
    parameters:
      - $ref: '#/components/parameters/dongleId'
    post:
      operationId: getUploadUrls
      summary: Get multiple log file upload URLs
      description: Request URLs to which openpilot files can be uploaded via HTTP PUT. This endpoint only accepts tokens signed with a device private key.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                paths:
                  type: array
                  items:
                    type: string
                  description: Files to upload from openpilot data directory.
                expiry_days:
                  type: integer
                  minimum: 1
                  maximum: 30
                  default: 1
                  description: number of days the url should be valid
            example:
                paths:
                  - "2019-06-06--11-30-31--9/fcamera.hevc"
                  - "2019-06-06--11-30-31--9/ecamera.hevc"
                expiry_days: 1
      responses:
        '200':
          description: JSON array containing upload URLs
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    url:
                      type: string
                      description: URL to which a PUT request can be sent with file contents
                example:
                  - url: "https://commaincoming.blob.core.windows.net/commaincoming/239e82a1d3c855f2/2019-06-06--11-30-31/9/fcamera.hevc?sr=b&sp=c&sig=cMCrZt5fje7SDXlKcOIjHgA0wEVAol71FL6ac08Q2Iw%3D&sv=2018-03-28&se=2019-06-13T18%3A43%3A01Z"
                  - url: "https://commaincoming.blob.core.windows.net/commaincoming/239e82a1d3c855f2/2019-06-06--11-30-31/9/ecamera.hevc?sr=b&sp=c&sig=cMCrZt5fje7SDXlKcOIjHgA0wEVAol71FL6ac08Q2Iw%3D&sv=2018-03-28&se=2019-06-13T18%3A43%3A01Z"
  /v2/pilotpair:
    post:
      operationId: pilotPair
      summary: Pair device
      description: Pair a device to the authenticated user's account.
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                pair_token:
                  type: string
                  description: "JWT signed by your device private key. Payload contains `{\"identity\": <dongle-id>, \"pair\": true}`"
      responses:
        '200':
          description: JSON object containing pairing result
          content:
            application/json:
              schema:
                type: object
                properties:
                  first_pair:
                    type: boolean
                    description: True if the device was unpaired prior to this call. False if the device was previously paired by an authenticated user.
  /v2/pilotauth:
    post:
      operationId: pilotAuth
      summary: openpilot auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                imei:
                  type: string
                  description: Device IMEI
                imei2:
                  type: string
                  description: Device IMEI, second slot
                serial:
                  type: string
                  description: Device serial number
                public_key:
                  type: string
                  description: 2048-bit RSA public key
                register_token:
                  type: string
                  description: "JWT signed by private key. Payload must contain {\"register\": true}"
      responses:
        '200':
          description: JSON object containing authenticated dongle ID and token
          content:
            application/json:
              schema:
                type: object
                properties:
                  dongle_id:
                    type: string
                    description: Dongle ID
                  access_token:
                    type: string
                    description: JWT
  /v1/route/{routeName}:
    parameters:
      - $ref: '#/components/parameters/routeName'
    get:
      operationId: getRoute
      summary: Route Info
      description: Returns information about the specified route. Authenticated user must have ownership of, or read access to, the device from which the route was uploaded.
      responses:
        '200':
          description: JSON object containing route information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
  /v1/route/{routeName}/segments:
    parameters:
      - $ref: '#/components/parameters/routeName'
    get:
      operationId: getRouteSegments
      summary: Route Segments
      description: Returns list of segments comprising a route. Authenticated user must have ownership of, or read access to, the device from which the route was uploaded.
      responses:
        '200':
          description: JSON array of segments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Segment'
  /v1/route/{routeName}/files:
    parameters:
      - $ref: '#/components/parameters/routeName'
    get:
      operationId: getRouteFiles
      summary: Raw driving data
      description: Retrieve uploaded files for a route. Calls to this API are rate limited to 5 per minute.
      responses:
        '200':
          description: JSON object containing signed URLs to various log files. URLs are valid for 1 hour. All arrays are sorted by segment number ascending.
          content:
            application/json:
              schema:
                type: object
                properties:
                  qlogs:
                    type: array
                    description: Array of signed URLs to qlog.bz2 files
                    items:
                      type: string
                  qcameras:
                    type: array
                    description: Array of signed URLs to qcamera.ts files
                    items:
                      type: string
                  logs:
                    type: array
                    description: Array of signed URLs to rlog.bz2 files
                    items:
                      type: string
                  cameras:
                    type: array
                    description: Array of signed URLs to fcamera.hevc files
                    items:
                      type: string
                  dcameras:
                    type: array
                    description: Array of signed URLs to dcamera.hevc files
                    items:
                      type: string
                  ecameras:
                    type: array
                    description: Array of signed URLs to ecamera.hevc files
                    items:
                      type: string
  /v1/route/{routeName}/qcamera.m3u8:
    parameters:
      - $ref: '#/components/parameters/routeName'
    get:
      operationId: getRouteStream
      summary: Video Stream
      description: Returns rear camera HLS stream index of MPEG-TS fragments.
      responses:
        '200':
          description: m3u8 playlist
          content:
            application/x-mpegURL:
              schema:
                type: string
                example: |
                  #EXTM3U
                  #EXT-X-VERSION:3
                  #EXT-X-TARGETDURATION:4
                  #EXT-X-MEDIA-SEQUENCE:0
                  #EXT-X-PLAYLIST-TYPE:VOD

                  #EXTINF:3.049958,
                  8_61.ts?v=2
                  #EXTINF:3.049955,
                  69_61.ts?v=2
                  #EXTINF:3.049955,
                  130_61.ts?v=2
                  #EXTINF:3.049958,
                  191_61.ts?v=2
                  #EXTINF:3.049970,
                  252_61.ts?v=2
                  #EXTINF:3.049955,
                  313_61.ts?v=2
                  #EXTINF:3.050007,
                  374_61.ts?v=2
                  #EXTINF:3.049913,
                  435_61.ts?v=2
                  #EXTINF:3.049942,
                  496_61.ts?v=2
                  #EXTINF:3.049964,
                  557_61.ts?v=2
                  #EXTINF:3.049955,
                  618_61.ts?v=2
  /v1/route/{routeName}/share_signature:
    parameters:
      - $ref: '#/components/parameters/routeName'
    get:
      operationId: getRouteShareSignature
      summary: Route share signature
      description: Return route share URL signature. Expires in 365 days.
      responses:
        '200':
          description: JSON object containing route share signature
          content:
            application/json:
              schema:
                type: object
                properties:
                  exp:
                    type: string
                    description: Unix timestamp of expiration
                  sig:
                    type: string
                    description: Signature
  /v1/route/{routeName}/preserve:
    parameters:
      - $ref: '#/components/parameters/routeName'
    post:
      operationId: preserveRoute
      summary: Preserve route
      description: Preserve route from deletion. Authenticated user must have ownership of the device from which the route was uploaded.
      responses:
        '200':
          $ref: '#/components/responses/SuccessInteger'
    delete:
      operationId: unpreserveRoute
      summary: Unpreserve route
      description: Unpreserve route from deletion. Authenticated user must have ownership of the device from which the route was uploaded.
      responses:
        '200':
          $ref: '#/components/responses/SuccessInteger'
  /v1/tokens/mapbox/{dongleId}:
    parameters:
      - $ref: '#/components/parameters/dongleId'
    get:
      operationId: getMapboxToken
      summary: Mapbox token
      description: Returns a Mapbox token for the specified dongle ID. Authenticated user must have ownership of the dongle ID.
      responses:
        '200':
          description: JSON object containing Mapbox token
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: Mapbox token
  /v1/navigation/{dongleId}/set_destination:
    parameters:
      - $ref: '#/components/parameters/dongleId'
    post:
      operationId: setDestination
      summary: Set destination
      description: Set destination for navigation. Authenticated user must have ownership of the dongle ID.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NavigationDestination'
      responses:
        '200':
          description: Destination set
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    const: true
                  saved_next:
                    type: boolean
                    description: True if the destination was stored and will be applied when the device is next online. False if the destination was set immediately.
  /v1/navigation/{dongleId}/next:
    properties:
      - $ref: '#/components/parameters/dongleId'
    get:
      operationId: getNavigationNext
      summary: Retrieve navigation destination
      description: Retrieve next location from database. This was set on Set destination if the device was offline. Next location is removed from the database after this call or when a new destination is set.
      responses:
        '200':
          description: JSON object containing next destination, or null if no destination is set
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/NavigationDestination'
                  - type: null
    delete:
      operationId: clearNavigationNext
      summary: Clear navigation destination
      description: Delete next destination from database.
      responses:
        '200':
          description: Destination cleared
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    const: true
                  deleted:
                    $ref: '#/components/schemas/NavigationDestination'
  /v1/navigation/{dongleId}/locations:
    parameters:
      - $ref: '#/components/parameters/dongleId'
    get:
      operationId: getNavigationSavedLocations
      summary: Retrieve saved locations
      description: Retrieve saved locations from database.
      responses:
        '200':
          description: JSON object containing saved locations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NavigationSavedLocation'
    put:
      operationId: saveNavigationLocation
      summary: Save location
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NavigationSavedLocation'
      responses:
        '200':
          $ref: '#/components/responses/SuccessBoolean'
    patch:
      operationId: updateNavigationLocation
      summary: Update saved location
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  $ref: '#/components/schemas/NavigationSavedLocationID'
      responses:
        '200':
          $ref: '#/components/responses/SuccessBoolean'
    delete:
      operationId: deleteNavigationLocation
      summary: Delete saved location
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                nav_location_id:
                  $ref: '#/components/schemas/NavigationLocationID'
      responses:
        '200':
          $ref: '#/components/responses/SuccessBoolean'
  /v1/clips/create:
    post:
      operationId: createClip
      summary: Create clip
  /v1/clips/list:
    get:
      operationId: listClips
      summary: List clips
  /v1/clips/details:
    get:
      operationId: getClip
      summary: Get clip
  /v1/clips/update:
    patch:
      operationId: updateClip
      summary: Update clip
    delete:
      operationId: deleteClip
      summary: Delete clip
components:
  responses:
    SuccessInteger:
      description: Operation successful
      content:
        application/json:
          schema:
            properties:
              success:
                type: object
                properties:
                  success:
                    type: integer
                    const: 1
    SuccessBoolean:
      description: Operation successful
      content:
        application/json:
          schema:
            properties:
              success:
                type: boolean
                const: true
  schemas:
    Profile:
      type: object
      properties:
        email:
          type: string
          format: email
        id:
          type: string
          description: Dongle ID
        points:
          type: integer
          description: comma points
          deprecated: true
        regdate:
          type: integer
          description: Unix timestamp at time of registration
        superuser:
          type: boolean
        username:
          type: string
          deprecated: true
          nullable: true
        user_id:
          type: string
          description: OAuth2 user ID
      required:
        - email
        - id
        - points
        - regdate
        - superuser
        - user_id
    Device:
      type: object
      properties:
        dongle_id:
          type: string
        alias:
          type: string
          description: Device nickname
        serial:
          type: string
          description: Device serial number
        athena_host:
          type: string
          description: Last connected athena server hostname
          nullable: true
        last_athena_ping:
          type: integer
          description: Unix timestamp of last athena ping
        ignore_uploads:
          type: boolean
          description: Uploads are ignored from this device
          nullable: true
        is_paired:
          type: boolean
          description: Device has an owner
        is_owner:
          type: boolean
          description: Authenticated user has write-access to the device
        public_key:
          type: string
          description: 2048-bit public RSA key
          nullable: true
        prime:
          type: boolean
          description: Device has a prime subscription
        prime_type:
          type: number
          description: Prime subscription type
          oneOf:
            - const: 0
              description: None
            - const: 1
              description: Magenta
            - const: 2
              description: Lite
            - const: 3
              description: Blue
            - const: 4
              description: Magenta new
        trial_claimed:
          type: boolean
          description: Device prime trial is claimed
          nullable: true
        device_type:
          type: string
          description: Device type
          enum:
            - app
            - neo
            - panda
            - two
            - freon
            - pc
            - three
        last_gps_time:
          type: integer
          nullable: true
        last_gps_lat:
          type: number
          nullable: true
        last_gps_lng:
          type: number
          nullable: true
        last_gps_accuracy:
          type: number
          nullable: true
        last_gps_speed:
          type: number
          nullable: true
        last_gps_bearing:
          type: number
          nullable: true
        openpilot_version:
          type: string
          nullable: true
        sim_id:
          type: string
          nullable: true
      required:
        - dongle_id
        - alias
        - serial
        - is_paired
        - public_key
        - prime
        - prime_type
        - trial_claimed
        - device_type
        - last_gps_time
        - last_gps_lat
        - last_gps_lng
        - last_gps_accuracy
        - last_gps_speed
        - last_gps_bearing
        - sim_id
    DeviceUser:
      type: object
      properties:
        email:
          type: string
          description: User email
        permission:
          type: string
          description: Device permission
          oneOf:
            - const: owner
            - const: read_access
    DeviceLocation:
      type: object
      properties:
        lat:
          type: number
          description: Latitude, in decimal degrees
        lng:
          type: number
          description: Longitude, in decimal degrees
        time:
          type: integer
          description: Unix timestamp, in milliseconds
        accuracy:
          type: number
          description: Accuracy, in metres
        speed:
          type: number
          description: Speed, in metres per second
        bearing:
          type: number
          description: Bearing angle, in degrees from north
    DrivingStatistics:
      type: object
      description: Summary of drives over a period of time
      properties:
        distance:
          type: number
          description: Sum of distance driven in time period, in miles
        minutes:
          type: integer
          description: Sum of time driven in time period, in minutes
        routes:
          type: integer
          description: Count of routes in time period
    Segment:
      type: object
      description: A single segment of a route is up to 60 seconds in length.
      properties:
        canonical_name:
          $ref: '#/components/schemas/SegmentName'
        number:
          type: integer
          description: Segment number
          minimum: 0
        canonical_route_name:
          $ref: '#/components/schemas/RouteName'
        dongle_id:
          $ref: '#/components/schemas/DongleID'
        create_time:
          type: integer
          description: Unix timestamp at which upload_url was first called for file in segment
        start_time_utc_millis:
          type: integer
          description: Milliseconds since epoch of segment start time
        end_time_utc_millis:
          type: integer
          description: Milliseconds since epoch of segment end time
        url:
          type: string
          description: Signed URL from which route.coords and JPEGs can be downloaded
        length:
          type: number
          description: Sum of distances between GPS points in miles
        can:
          type: boolean
          description: Segment contains CAN messages
        hpgps:
          type: boolean
          description: Segment has ublox packets
        radar:
          type: boolean
          description: Segment contains radar tracks in CAN
        devicetype:
          $ref: '#/components/schemas/SegmentDataSource'
        proc_log:
          $ref: '#/components/schemas/FileProcStatus'
        proc_qlog:
          $ref: '#/components/schemas/FileProcStatus'
        proc_camera:
          $ref: '#/components/schemas/FileProcStatus'
        proc_dcamera:
          $ref: '#/components/schemas/FileProcStatus'
        passive:
          type: boolean
        version:
          type: string
        git_commit:
          type: string
        git_branch:
          type: string
        git_remote:
          type: string
        git_dirty:
          type: boolean
    Route:
      type: object
      properties:
        fullname:
          $ref: '#/components/schemas/RouteName'
        dongle_id:
          $ref: '#/components/schemas/DongleID'
        user_id:
          $ref: '#/components/schemas/DongleID'
        is_public:
          type: boolean
        create_time:
          type: integer
          description: Unix timestamp at which upload_url was first called for file in route
        url:
          type: string
          description: Signed storage bucket URL from which route.coords and JPEGs can be downloaded
        share_expiry:
          type: integer
          description: Unix timestamp at which signed URL expires
        share_sig:
          type: string
          description: URL signature
        length:
          type: number
          description: Sum of distances between GPS points in miles
        can:
          type: boolean
          description: Route contains CAN messages
        hpgps:
          type: boolean
          description: Route has ublox packets
        radar:
          type: boolean
          description: Route contains radar tracks in CAN
        devicetype:
          $ref: '#/components/schemas/SegmentDataSource'
        maxqlog:
          type: integer
          description: Maximum qlog segment number uploaded
        maxqcamera:
          type: integer
          description: Maximum qcamera segment number uploaded
        maxlog:
          type: integer
          description: Maximum log segment number uploaded
        maxcamera:
          type: integer
          description: Maximum road camera segment number uploaded
        maxdcamera:
          type: integer
          description: Maximum driver camera segment number uploaded
        maxecamera:
          type: integer
          description: Maximum wide road camera segment number uploaded
        procqlog:
          type: integer
          description: Maximum qlog segment number processed
        procqcamera:
          type: integer
          description: Maximum qcamera segment number processed
        proclog:
          type: integer
          description: Maximum log segment number processed
        proccamera:
          type: integer
          description: Maximum road camera segment number processed
        start_lat:
          type: number
          description: First latitude recorded in route from GPS
        start_lng:
          type: number
          description: First longitude recorded in route from GPS
        start_time:
          type: number
          description: Unix timestamp at beginning of route
        end_lat:
          type: number
          description: Last latitude recorded in route from GPS
        end_lng:
          type: number
          description: Last longitude recorded in route from GPS
        end_time:
          type: number
          description: Unix timestamp at end of last segment in route
        passive:
          type: boolean
        version:
          type: string
        git_commit:
          type: string
        git_branch:
          type: string
        git_remote:
          type: string
        git_dirty:
          type: boolean
        platform:
          type: string
        vin:
          $ref: '#/components/schemas/VIN'
        init_logmonotime:
          type: integer
          description: Minimum logMonoTime from openpilot log
    RouteSegment:
      type: object
      allOf:
        - $ref: '#/components/schemas/Route'
        - type: object
          properties:
            segment_numbers:
              type: array
              description: Segment numbers in route
              items:
                type: integer
                minimum: 0
            segment_start_times:
              type: array
              description: Segment start times in milliseconds since epoch
              items:
                type: integer
            segment_end_times:
              type: array
              description: Segment end times in milliseconds since epoch
              items:
                type: integer
    DeviceType:
      type: string
      description: Device type
      enum:
        - app
        - neo
        - panda
        - two
        - freon
        - pc
        - three
    SegmentDataSource:
      type: integer
      description: Data source
      oneOf:
        - const: 3
          title: eon
        - const: 6
          title: comma two
        - const: 7
          title: comma three
    FileProcStatus:
      type: integer
      description: Log file status
      oneOf:
        - const: -1
          title: Not received
        - const: 0
          title: Upload URL sent
        - const: 10
          title: Received
        - const: 20
          title: Enqueued
        - const: 30
          title: Processing
        - const: 40
          title: Processed
        - const: 50
          title: Errored
    FileType:
      type: integer
      oneOf:
        - const: 1
          title: Road camera (camera)
        - const: 2
          title: Front camera (driver, dcamera)
        - const: 3
          title: Log (raw, rlog)
        - const: 4
          title: Qlog
        - const: 5
          title: QCamera
        - const: 6
          title: Wide road camera (extended, ecamera)
    DongleID:
      type: string
      title: Dongle ID
      description: A unique 16-character hexadecimal string. Can represent a device or a user.
      pattern: '^[0-9a-f]{16}$'
      example: "1a2b3c4d5e6f7a8b"
      readOnly: true
    RouteName:
      type: string
      title: Canonical route name
      description: Contains a dongle ID and timestamp of the beginning of the route
      pattern: '^[0-9a-f]{16}\|[0-9]{4}-[0-9]{2}-[0-9]{2}--[0-9]{2}-[0-9]{2}-[0-9]{2}$'
      example: "1a2b3c4d5e6f7a8b|2019-01-01--00-00-00"
    SegmentName:
      type: string
      title: Canonical segment name
      description: Contains a dongle ID, timestamp of the beginning of the route, and segment number
      pattern: '^[0-9a-f]{16}\|[0-9]{4}-[0-9]{2}-[0-9]{2}--[0-9]{2}-[0-9]{2}-[0-9]{2}--[0-9]+$'
      example: "1a2b3c4d5e6f7a8b|2019-01-01--00-00-00--0"
    VIN:
      type: string
      title: Vehicle identification number
      description: 17-character alphanumeric string
      pattern: '^[0-9A-Z]{17}$'
      example: "5YJ3E1EA7HF000000"
    NavigationDestination:
      type: object
      title: Navigation destination
      properties:
        place_name:
          type: string
          description: Short name of destination
          example: "1441 State St"
        place_details:
          type: string
          description: Address details of destination. Should not include short name.
          example: "San Diego, CA 92101, United States"
        latitude:
          type: number
          description: Latitude, decimal degrees
          example: 32.720450
        longitude:
          type: number
          description: Longitude, decimal degrees
          example: -117.166210
    NavigationSavedLocationID:
      type: number
      title: Navigation saved location ID
      description: Identifier for a saved location
      readOnly: true
    NavigationSavedLocation:
      type: object
      title: Navigation saved location
      allOf:
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/NavigationSavedLocationID'
            dongle_id:
              $ref: '#/components/schemas/DongleID'
            save_type:
              type: string
              description: Type of saved location
              oneOf:
                - const: favorite
                  title: Favorite
                - const: recent
                  title: Recent
            label:
              type: string
              description: Optional label for for locations with type "favorite"
              nullable: true
            modified:
              type: string
              description: When this saved location was last modified
              readOnly: true
        - $ref: '#/components/schemas/NavigationDestination'
    Clip:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for this clip
          readOnly: true
        create_time:
          type: integer
        dongle_id:
          $ref: '#/components/schemas/DongleID'
        route_name:
          $ref: '#/components/schemas/RouteName'
        start_time:
          type: integer
        end_time:
          type: integer
        video_type:
          type: string
          description: Clip type
          oneOf:
            - const: q
              title: QCamera
            - const: f
              title: Road camera
            - const: e
              title: Wide road camera
            - const: d
              title: Driver camera
            - const: 360
              title: 360
        status:
          type: string
          description: Clip status
          oneOf:
            - const: pending
              title: Pending
            - const: done
              title: Done
            - const: failed
              title: Failed
        is_public:
          type: boolean
          description: Clip is publicly accessible
        title:
          type: string
          description: Optional title for clip
          nullable: true
      required:
        - id
        - create_time
        - dongle_id
        - route_name
        - start_time
        - end_time
        - video_type
        - status
        - is_public
  parameters:
    dongleId:
      name: dongleId
      in: path
      description: Dongle ID
      required: true
      schema:
        $ref: '#/components/schemas/DongleID'
    routeName:
      name: routeName
      in: path
      description: Canonical route name
      required: true
      schema:
        $ref: '#/components/schemas/RouteName'
    segmentName:
      name: segmentName
      in: path
      description: Canonical segment name
      required: true
      schema:
        $ref: '#/components/schemas/SegmentName'
